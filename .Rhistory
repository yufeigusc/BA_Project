temp_data9 = temp_data7
temp_data9$risk_flag = temp_data9$risk_flag - train_before_factor$stop_auto_buy
temp_data10 = temp_data9
temp_data10$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
)
crossv(
formula, temp_data10)
temp_data10 = temp_data9
temp_data10$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
)
crossv(
formula, temp_data10)
```{r}
```{r}
temp_data10 = temp_data9
temp_data10$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
)
crossv(
formula, temp_data10)
temp_data10 = temp_data9
temp_data10$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month)/sales_3_month
)
crossv(
formula, temp_data10)
train_before_factor = read.csv("Competition_Train.csv")
test_before_factor = read.csv("Competition_Test.csv")
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
train = read.csv("Competition_Train.csv")
test = read.csv("Competition_Test.csv")
str(train)
str(test)
train_before_factor = read.csv("Competition_Train.csv")
test_before_factor = read.csv("Competition_Test.csv")
train$potential_issue = as.factor(train$potential_issue)
train[18:23] = lapply(train[18:23], as.factor)
str(train)
test$potential_issue = as.factor(test$potential_issue)
test[18:22] = lapply(test[18:22], as.factor)
str(test)
library(plyr)
train$potential_issue = revalue(train$potential_issue, c("0"="No", "1"="Yes"))
train[18:23] = lapply(train[18:23], function(x) revalue(x, c("0"="No", "1"="Yes")))
str(train)
test$potential_issue = revalue(test$potential_issue, c("0"="No", "1"="Yes"))
test[18:22] = lapply(test[18:22], function(x) revalue(x, c("0"="No", "1"="Yes")))
str(test)
library(caret)
library(e1071)
fitControl = trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = twoClassSummary)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy")])
train$risk_flag = risk_flag_sum
train = subset(train, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
train$inventory_turnover_ratio1 <- ifelse((train$national_inv + train$in_transit_qty) == 0, 0, train$sales_1_month / ((train$national_inv + train$in_transit_qty) / 2))
train$risk_flag = train$risk_flag - train_before_factor$deck_risk
train$inventory_compliance <- ifelse(train$national_inv >= train$min_bank, 1, 0)
train$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month)/sales_3_month
)
set.seed(123)
train(formula, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
train = read.csv("Competition_Train.csv")
test = read.csv("Competition_Test.csv")
train_before_factor = read.csv("Competition_Train.csv")
test_before_factor = read.csv("Competition_Test.csv")
logreg <- function(variables, dataset) {
set.seed(123)
modelBO = glm(variables, data = dataset, family = "binomial")
summary(modelBO)
}
crossv <- function(variables, dataset) {
set.seed(123)
results = suppressWarnings(train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC"))
print(results$results$ROC)
}
crossv_no_suppression <- function(variables, dataset) {
set.seed(123)
results = train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
}
train$potential_issue = as.factor(train$potential_issue)
train[18:23] = lapply(train[18:23], as.factor)
str(train)
test$potential_issue = as.factor(test$potential_issue)
test[18:22] = lapply(test[18:22], as.factor)
str(test)
library(plyr)
train$potential_issue = revalue(train$potential_issue, c("0"="No", "1"="Yes"))
train[18:23] = lapply(train[18:23], function(x) revalue(x, c("0"="No", "1"="Yes")))
str(train)
test$potential_issue = revalue(test$potential_issue, c("0"="No", "1"="Yes"))
test[18:22] = lapply(test[18:22], function(x) revalue(x, c("0"="No", "1"="Yes")))
str(test)
library(caret)
library(e1071)
fitControl = trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = twoClassSummary)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy")])
train$risk_flag = risk_flag_sum
train = subset(train, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
train$inventory_turnover_ratio1 <- ifelse((train$national_inv + train$in_transit_qty) == 0, 0, train$sales_1_month / ((train$national_inv + train$in_transit_qty) / 2))
train$risk_flag = train$risk_flag - train_before_factor$deck_risk
train$inventory_compliance <- ifelse(train$national_inv >= train$min_bank, 1, 0)
train$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month)/sales_3_month
)
set.seed(123)
crossv(formula, train)
logreg(formula, train)
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
train = read.csv("Competition_Train.csv")
test = read.csv("Competition_Test.csv")
train_before_factor = read.csv("Competition_Train.csv")
test_before_factor = read.csv("Competition_Test.csv")
logreg <- function(variables, dataset) {
set.seed(123)
modelBO = glm(variables, data = dataset, family = "binomial")
summary(modelBO)
}
crossv <- function(variables, dataset) {
set.seed(123)
results = suppressWarnings(train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC"))
print(results$results$ROC)
}
crossv_no_suppression <- function(variables, dataset) {
set.seed(123)
results = train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
}
train$potential_issue = as.factor(train$potential_issue)
train[18:23] = lapply(train[18:23], as.factor)
#str(train)
test$potential_issue = as.factor(test$potential_issue)
test[18:22] = lapply(test[18:22], as.factor)
#str(test)
library(plyr)
train$potential_issue = revalue(train$potential_issue, c("0"="No", "1"="Yes"))
train[18:23] = lapply(train[18:23], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(train)
test$potential_issue = revalue(test$potential_issue, c("0"="No", "1"="Yes"))
test[18:22] = lapply(test[18:22], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(test)
library(caret)
library(e1071)
fitControl = trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = twoClassSummary)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy")])
train$risk_flag = risk_flag_sum
train = subset(train, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
train$inventory_turnover_ratio1 <- ifelse((train$national_inv + train$in_transit_qty) == 0, 0, train$sales_1_month / ((train$national_inv + train$in_transit_qty) / 2))
#train$risk_flag = train$risk_flag - train_before_factor$deck_risk
train$inventory_compliance <- ifelse(train$national_inv >= train$min_bank, 1, 0)
train$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month)/sales_3_month
)
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
train = read.csv("Competition_Train.csv")
test = read.csv("Competition_Test.csv")
train_before_factor = read.csv("Competition_Train.csv")
test_before_factor = read.csv("Competition_Test.csv")
logreg <- function(variables, dataset) {
set.seed(123)
modelBO = glm(variables, data = dataset, family = "binomial")
summary(modelBO)
}
crossv <- function(variables, dataset) {
set.seed(123)
results = suppressWarnings(train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC"))
print(results$results$ROC)
}
crossv_no_suppression <- function(variables, dataset) {
set.seed(123)
results = train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
}
train$potential_issue = as.factor(train$potential_issue)
train[18:23] = lapply(train[18:23], as.factor)
#str(train)
test$potential_issue = as.factor(test$potential_issue)
test[18:22] = lapply(test[18:22], as.factor)
#str(test)
library(plyr)
train$potential_issue = revalue(train$potential_issue, c("0"="No", "1"="Yes"))
train[18:23] = lapply(train[18:23], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(train)
test$potential_issue = revalue(test$potential_issue, c("0"="No", "1"="Yes"))
test[18:22] = lapply(test[18:22], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(test)
library(caret)
library(e1071)
fitControl = trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = twoClassSummary)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy")])
train$risk_flag = risk_flag_sum
train = subset(train, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
train$inventory_turnover_ratio1 <- ifelse((train$national_inv + train$in_transit_qty) == 0, 0, train$sales_1_month / ((train$national_inv + train$in_transit_qty) / 2))
#train$risk_flag = train$risk_flag - train_before_factor$deck_risk
train$inventory_compliance <- ifelse(train$national_inv >= train$min_bank, 1, 0)
train$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month)/sales_3_month
)
set.seed(123)
crossv(formula, train)
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
train = read.csv("Competition_Train.csv")
test = read.csv("Competition_Test.csv")
train_before_factor = read.csv("Competition_Train.csv")
test_before_factor = read.csv("Competition_Test.csv")
logreg <- function(variables, dataset) {
set.seed(123)
modelBO = glm(variables, data = dataset, family = "binomial")
summary(modelBO)
}
crossv <- function(variables, dataset) {
set.seed(123)
results = suppressWarnings(train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC"))
print(results$results$ROC)
}
crossv_no_suppression <- function(variables, dataset) {
set.seed(123)
results = train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
}
train$potential_issue = as.factor(train$potential_issue)
train[18:23] = lapply(train[18:23], as.factor)
#str(train)
test$potential_issue = as.factor(test$potential_issue)
test[18:22] = lapply(test[18:22], as.factor)
#str(test)
library(plyr)
train$potential_issue = revalue(train$potential_issue, c("0"="No", "1"="Yes"))
train[18:23] = lapply(train[18:23], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(train)
test$potential_issue = revalue(test$potential_issue, c("0"="No", "1"="Yes"))
test[18:22] = lapply(test[18:22], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(test)
library(caret)
library(e1071)
fitControl = trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = twoClassSummary)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy","rev_stop")])
train$risk_flag = risk_flag_sum
train = subset(train, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
train$inventory_turnover_ratio1 <- ifelse((train$national_inv + train$in_transit_qty) == 0, 0, train$sales_1_month / ((train$national_inv + train$in_transit_qty) / 2))
train$risk_flag = train$risk_flag - train_before_factor$deck_risk
train$inventory_compliance <- ifelse(train$national_inv >= train$min_bank, 1, 0)
train$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month)/sales_3_month
)
set.seed(123)
crossv(formula, train)
formula1 = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month)/sales_3_month
)
modelBO = glm(formula1 , data = train, family = "binomial")
summary(modelBO)
formula1 = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
)
modelBO = glm(formula1 , data = train, family = "binomial")
summary(modelBO)
formula1 = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
#+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
#+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
)
modelBO = glm(formula1 , data = train, family = "binomial")
summary(modelBO)
crossv(formula1, train)
formula1 = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
#+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
)
crossv(formula1, train)
formula1 = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
)
crossv(formula1, train)
formula1 = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
#+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
)
crossv(formula1, train)
formula1 = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
)
model1 = glm(formula1 , data = train, family = "binomial")
summary(model1)
Pred1 = predict(model1, newdata = test, type = "response")
risk_flag_sum = rowSums(test_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy","rev_stop")])
test$risk_flag = risk_flag_sum
test = subset(test, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
test$inventory_turnover_ratio1 <- ifelse((test$national_inv + test$in_transit_qty) == 0, 0, test$sales_1_month / ((test$national_inv + test$in_transit_qty) / 2))
test$risk_flag = test$risk_flag - test_before_factor$deck_risk
test$inventory_compliance <- ifelse(test$national_inv >= test$min_bank, 1, 0)
test$inventory_enough <- ifelse(test$national_inv >= test$lead_time*(test$forecast_3_month/90), 1, 0)
Pred1 = predict(model1, newdata = test, type = "response")
PredTest1 = data.frame(test$sku, Pred1)
str(PredTest1)
summary(PredTest1)
colnames(PredTest1) = c("sku", "went_on_backorder")
str(PredTest1)
write.csv(PredTest1, "Test_1.csv", row.names = FALSE)
formula2 = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month)/sales_3_month
)
model2 = glm(formula2 , data = train, family = "binomial")
summary(model2)
Pred2 = predict(model2, newdata = test, type = "response")
PredTest2 = data.frame(test$sku, Pred1)
str(PredTest2)
colnames(PredTest2) = c("sku", "went_on_backorder")
str(PredTest2)
write.csv(PredTest2, "Test_2.csv", row.names = FALSE)
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
