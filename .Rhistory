- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
train$risk_flag = train$risk_flag - train_before_factor$deck_risk
train$risk_flag = train$risk_flag + train_before_factor$potential_issue
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
- potential_issue
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
fitControl = trainControl(method = "cv", number = 15, classProbs = TRUE, summaryFunction = twoClassSummary)
train$risk_flag = train$risk_flag + train_before_factor$potential_issue
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
- potential_issue
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
train$risk_flag = train$risk_flag + train_before_factor$potential_issue
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ sales_6_month/forecast_6_month
+ sales_9_month/forecast_9_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
- potential_issue
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
train = read.csv("Competition_Train.csv")
test = read.csv("Competition_Test.csv")
train_before_factor = read.csv("Competition_Train.csv")
test_before_factor = read.csv("Competition_Test.csv")
logreg <- function(variables, dataset) {
set.seed(123)
modelBO = glm(variables, data = dataset, family = "binomial")
summary(modelBO)
}
crossv <- function(variables, dataset) {
set.seed(123)
results = suppressWarnings(train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC"))
print(results$results$ROC)
}
crossv_no_suppression <- function(variables, dataset) {
set.seed(123)
results = train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
}
train$potential_issue = as.factor(train$potential_issue)
train[18:23] = lapply(train[18:23], as.factor)
#str(train)
test$potential_issue = as.factor(test$potential_issue)
test[18:22] = lapply(test[18:22], as.factor)
#str(test)
library(plyr)
train$potential_issue = revalue(train$potential_issue, c("0"="No", "1"="Yes"))
train[18:23] = lapply(train[18:23], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(train)
test$potential_issue = revalue(test$potential_issue, c("0"="No", "1"="Yes"))
test[18:22] = lapply(test[18:22], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(test)
library(caret)
library(e1071)
fitControl = trainControl(method = "cv", number = 15, classProbs = TRUE, summaryFunction = twoClassSummary)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy","rev_stop")])
train$risk_flag = risk_flag_sum
train = subset(train, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
train$inventory_turnover_ratio1 <- ifelse((train$national_inv + train$in_transit_qty) == 0, 0, train$sales_1_month / ((train$national_inv + train$in_transit_qty) / 2))
train$risk_flag = train$risk_flag - train_before_factor$deck_risk
train$inventory_compliance <- ifelse(train$national_inv >= train$min_bank, 1, 0)
train$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
train$risk_flag = train$risk_flag + train_before_factor$potential_issue
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ sales_6_month/forecast_6_month
+ sales_9_month/forecast_9_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
- potential_issue
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
- potential_issue
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
fitControl = trainControl(method = "cv", number = 20, classProbs = TRUE, summaryFunction = twoClassSummary)
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
- potential_issue
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
- potential_issue
+ (national_inv-min_bank)
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
#+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
- potential_issue
#- sales_3_month - sales_6_month - sales_9_month
)
crossv(formula, train)
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
train = read.csv("Competition_Train.csv")
test = read.csv("Competition_Test.csv")
train_before_factor = read.csv("Competition_Train.csv")
test_before_factor = read.csv("Competition_Test.csv")
logreg <- function(variables, dataset) {
set.seed(123)
modelBO = glm(variables, data = dataset, family = "binomial")
summary(modelBO)
}
crossv <- function(variables, dataset) {
set.seed(123)
results = suppressWarnings(train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC"))
print(results$results$ROC)
}
crossv_no_suppression <- function(variables, dataset) {
set.seed(123)
results = train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
}
train$potential_issue = as.factor(train$potential_issue)
train[18:23] = lapply(train[18:23], as.factor)
#str(train)
test$potential_issue = as.factor(test$potential_issue)
test[18:22] = lapply(test[18:22], as.factor)
#str(test)
library(plyr)
train$potential_issue = revalue(train$potential_issue, c("0"="No", "1"="Yes"))
train[18:23] = lapply(train[18:23], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(train)
test$potential_issue = revalue(test$potential_issue, c("0"="No", "1"="Yes"))
test[18:22] = lapply(test[18:22], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(test)
library(caret)
library(e1071)
fitControl = trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = twoClassSummary)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy","rev_stop")])
train$risk_flag = risk_flag_sum
train = subset(train, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
train$inventory_turnover_ratio1 <- ifelse((train$national_inv + train$in_transit_qty) == 0, 0, train$sales_1_month / ((train$national_inv + train$in_transit_qty) / 2))
train$risk_flag = train$risk_flag - train_before_factor$deck_risk
train$inventory_compliance <- ifelse(train$national_inv >= train$min_bank, 1, 0)
train$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy","rev_stop","potential_issue")])
train$risk_flag = risk_flag_sum
train$risk_flag = train$risk_flag - 0.25*train_before_factor$stop_auto_buy - train_before_factor$deck_risk - 0.85*train_before_factor$rev_stop + train_before_factor$potential_issue
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
#+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
- potential_issue
#- sales_3_month - sales_6_month - sales_9_month
)
crossv(formula, train)
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
train = read.csv("Competition_Train.csv")
test = read.csv("Competition_Test.csv")
train_before_factor = read.csv("Competition_Train.csv")
test_before_factor = read.csv("Competition_Test.csv")
logreg <- function(variables, dataset) {
set.seed(123)
modelBO = glm(variables, data = dataset, family = "binomial")
summary(modelBO)
}
crossv <- function(variables, dataset) {
set.seed(123)
results = suppressWarnings(train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC"))
print(results$results$ROC)
}
crossv_no_suppression <- function(variables, dataset) {
set.seed(123)
results = train(variables, data = dataset, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
}
train$potential_issue = as.factor(train$potential_issue)
train[18:23] = lapply(train[18:23], as.factor)
#str(train)
test$potential_issue = as.factor(test$potential_issue)
test[18:22] = lapply(test[18:22], as.factor)
#str(test)
library(plyr)
train$potential_issue = revalue(train$potential_issue, c("0"="No", "1"="Yes"))
train[18:23] = lapply(train[18:23], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(train)
test$potential_issue = revalue(test$potential_issue, c("0"="No", "1"="Yes"))
test[18:22] = lapply(test[18:22], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(test)
library(caret)
library(e1071)
fitControl = trainControl(method = "cv", number = 10, classProbs = TRUE, summaryFunction = twoClassSummary)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy","rev_stop")])
train$risk_flag = risk_flag_sum
train = subset(train, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
train$inventory_turnover_ratio1 <- ifelse((train$national_inv + train$in_transit_qty) == 0, 0, train$sales_1_month / ((train$national_inv + train$in_transit_qty) / 2))
train$risk_flag = train$risk_flag - train_before_factor$deck_risk
train$inventory_compliance <- ifelse(train$national_inv >= train$min_bank, 1, 0)
train$inventory_enough <- ifelse(train$national_inv >= train$lead_time*(train$forecast_3_month/90), 1, 0)
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ lead_time/pieces_past_due
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
, data = train, method = "lambda", family = "binomial", trControl = fitControl, metric = "ROC")
library("stats")
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
, data = train, method = "lambda", family = "binomial", trControl = fitControl, metric = "ROC")
library("glmnet")
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
, data = train, method = "lambda", family = "binomial", trControl = fitControl, metric = "ROC")
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ forecast_3_month/min_bank
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
mod_data =  train
mod_data$risk_flag = mod_data$risk_flag + mod_data$potential_issue
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- potential_issue
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
mod_data =  train
mod_data$risk_flag = mod_data$risk_flag + mod_data$potential_issue
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- potential_issue
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
, data = mod_data, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
mod_data =  train
mod_data$risk_flag = mod_data$risk_flag + train_before_factor$potential_issue
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- potential_issue
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
, data = mod_data, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
mod_data =  train
mod_data$risk_flag = mod_data$risk_flag + train_before_factor$potential_issue
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- potential_issue
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
, data = mod_data, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
mod_data =  train
mod_data$risk_flag = mod_data$risk_flag + train_before_factor$potential_issue
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- potential_issue
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
, data = mod_data, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
mod_data =  train
mod_data$risk_flag = mod_data$risk_flag + train_before_factor$potential_issue
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- potential_issue
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
, data = mod_data, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
formula = as.formula(
went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+(forecast_6_month-forecast_3_month)/forecast_3_month
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
#+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
#- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
- potential_issue
+ sales_3_month/min_bank
)
crossv(formula, train)
set.seed(123)
results = train(went_on_backorder ~ . - sku +lead_time/in_transit_qty - lead_time
- perf_12_month_avg - perf_6_month_avg - sales_1_month - min_bank
+ local_bo_qty*pieces_past_due
- forecast_9_month - forecast_3_month
+ sales_6_month / perf_6_month_avg
- pieces_past_due
- local_bo_qty
- potential_issue
- risk_flag
+ sales_3_month/forecast_3_month
+ (sales_6_month-sales_3_month-sales_3_month)/sales_3_month
+(forecast_6_month-forecast_3_month-forecast_3_month)/forecast_3_month
+ sales_3_month/min_bank
, data = train, method = "glm", family = "binomial", trControl = fitControl, metric = "ROC")
print(results$results$ROC)
