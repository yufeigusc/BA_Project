---
title: "Introduction to R"
5*9
```{r}
2^10
sqrt(2)
sqrt(2)
SquareRoot2 = sqrt(2)
SquareRoot2
SquareRoot3 <- sqrt(3)
SquareRoot3
c(1,2,3,4,5)
Country = c("Brazil", "China", "India", "Switzerland", "USA")
Country
LifeExpectancy = c(74, 76, 65, 83, 79)
LifeExpectancy
Country[1]
LifeExpectancy[3]
Country[2:4]
Data = data.frame(Country, LifeExpectancy)
Data
Data$LifeExpectancy
Data$LifeExpectancy[1]
Data$LifeExpectancy[3:5]
Population = c(199000, 1390000, 1240000, 7997, 318000)
Population
Data2 = cbind(Data, Population)
Data2
Country = c("Australia", "Greece")
LifeExpectancy = c(82, 81)
Population = c(23050, 11125)
NewData = data.frame(Country, LifeExpectancy, Population)
NewData
Data3 = rbind(Data2, NewData)
Data3
WHO = read.csv("WHO.csv")
WHO
str(WHO)
WHO = read.csv("WHO.csv", stringsAsFactors = TRUE)
str(WHO)
summary(WHO)
SEA = subset(WHO, Region == "South-East Asia")
str(SEA)
write.csv(SEA, "WHO_SEA.csv")
mean(WHO$Under15)
sd(WHO$Under15)
summary(WHO$Under15)
plot(WHO$GNI, WHO$FertilityRate)
hist(WHO$LifeExpectancy)
hist(WHO$LifeExpectancy, xlab = "Lefe Expectancy", ylab = "Number of Countries", main = "Distribution of Life Expectancy in the World")
table(WHO$Region)
tapply(WHO$Over60, WHO$Region, mean)
tapply(WHO$ChildMortality, WHO$Region, max)
q()
setwd("~/")
baseball = read.csv("Moneyball.csv", stringsAsFactors = TRUE)
str(baseball)
moneyball = subset(baseball, Year < 2002)
str(moneyball)
moneyball$RD = moneyball$RS - moneyball$RA
str(moneyball)
PredictWins = lm(W ~ RD, data = moneyball)
summary(PredictWins)
PredictRS = lm(RS ~ OBP + SLG + BA, data = moneyball)
summary(PredictRS)
cor(data.frame(moneyball$OBP, moneyball$SLG, moneyball$BA))
PredictRS1 = lm(RS ~ OBP, data = moneyball)
summary(PredictRS1)
PredictRS2 = lm(RS ~ SLG, data = moneyball)
summary(PredictRS2)
PredictRS3 = lm(RS ~ BA, data = moneyball)
summary(PredictRS3)
PredictRS4 = lm(RS ~ SLG + OBP, data = moneyball)
summary(PredictRS4)
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
quality = read.csv("Diabetes.csv")
str(quality)
quality = read.csv("Diabetes.csv")
str(quality)
table(quality$PoorCare)
percPC = sum(quality$PoorCare)/nrow(quality)
percPC
summary(quality$PoorCare)
quality$PoorCare = as.factor(quality$PoorCare)
str(quality)
summary(quality$PoorCare)
library(caTools)
set.seed(123)
split = sample.split(quality$PoorCare, SplitRatio = 0.70)
split
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
table(qualityTrain$PoorCare)
table(qualityTest$PoorCare)
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data = qualityTrain, family = binomial)
summary(QualityLog)
predictTrain = predict(QualityLog, type = "response")
summary(predictTrain)
predictTrainWrong = predict(QualityLog)
summary(predictTrainWrong)
predictTrain[1:10]
qualityTrain$PoorCare[1:10]
tapply(predictTrain, qualityTrain$PoorCare, mean)
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
train_before_factor = read.csv("Competition_Train.csv")
missing_values <- any(is.na(train_before_factor))
# Print the result
print(missing_values)
train = read.csv("Competition_Train.csv")
test = read.csv("Competition_Test.csv")
#str(train)
#str(test)
train$potential_issue = as.factor(train$potential_issue)
train[18:23] = lapply(train[18:23], as.factor)
#str(train)
test$potential_issue = as.factor(test$potential_issue)
test[18:22] = lapply(test[18:22], as.factor)
#str(test)
library(plyr)
train$potential_issue = revalue(train$potential_issue, c("0"="No", "1"="Yes"))
train[18:23] = lapply(train[18:23], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(train)
test$potential_issue = revalue(test$potential_issue, c("0"="No", "1"="Yes"))
test[18:22] = lapply(test[18:22], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(test)
library(caret)
library(e1071)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy")])
temp_data3 = train
temp_data3$risk_flag = risk_flag_sum
temp_data3 = subset(temp_data3, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
temp_data4 = temp_data3
temp_data4$inventory_turnover_ratio1 <- ifelse((train$national_inv + train$in_transit_qty) == 0, 0, train$sales_1_month / ((train$national_inv + train$in_transit_qty) / 2))
temp_data6 = temp_data4
diff_forcast = train$forecast_6_month - train$forecast_3_month - train$forecast_3_month
temp_data6$future_growth = diff_forcast/(train$forecast_3_month+1)
missing_values <- any(is.na(temp_data6$future_growth))
# Print the result
print(missing_values)
# Load required libraries
library("dplyr")
library("faux")
library("DataExplorer")
library("caret")
library("randomForest")
# Load your dataset
data <- temp_data6
# Create a control function for RFE
control <- rfeControl(functions = rfFuncs, method = "repeatedcv", repeats = 5, number = 10)
x <- data %>%
select(-went_on_backorder) %>%
as.data.frame()
# Target variable
y <- data$went_on_backorder
# Training: 80%; Test: 20%
set.seed(2021)
inTrain <- createDataPartition(y, p = .80, list = FALSE)[,1]
x_train <- x[ inTrain, ]
x_test  <- x[-inTrain, ]
y_train <- y[ inTrain]
y_test  <- y[-inTrain]
result_rfe1 <- rfe(x = x_train,
y = y_train,
sizes = c(1:20),
rfeControl = control)
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
train_before_factor = read.csv("Competition_Train.csv")
missing_values <- any(is.na(train_before_factor))
# Print the result
print(missing_values)
train = read.csv("Competition_Train.csv")
test = read.csv("Competition_Test.csv")
#str(train)
#str(test)
train$potential_issue = as.factor(train$potential_issue)
train[18:23] = lapply(train[18:23], as.factor)
#str(train)
test$potential_issue = as.factor(test$potential_issue)
test[18:22] = lapply(test[18:22], as.factor)
#str(test)
library(plyr)
train$potential_issue = revalue(train$potential_issue, c("0"="No", "1"="Yes"))
train[18:23] = lapply(train[18:23], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(train)
test$potential_issue = revalue(test$potential_issue, c("0"="No", "1"="Yes"))
test[18:22] = lapply(test[18:22], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(test)
library(caret)
library(e1071)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy")])
temp_data3 = train
temp_data3$risk_flag = risk_flag_sum
temp_data3 = subset(temp_data3, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
temp_data4 = temp_data3
temp_data4$inventory_turnover_ratio1 <- ifelse((train$national_inv + train$in_transit_qty) == 0, 0, train$sales_1_month / ((train$national_inv + train$in_transit_qty) / 2))
temp_data6 = temp_data4
diff_forcast = train$forecast_6_month - train$forecast_3_month - train$forecast_3_month
temp_data6$future_growth = diff_forcast/(train$forecast_3_month+1)
missing_values <- any(is.na(temp_data6$future_growth))
# Print the result
print(missing_values)
# Load required libraries
#library("dplyr")
library("faux")
library("DataExplorer")
library("caret")
library("randomForest")
# Load your dataset
data <- temp_data6
# Create a control function for RFE
control <- rfeControl(functions = rfFuncs, method = "repeatedcv", repeats = 5, number = 10)
x <- data %>%
select(-went_on_backorder) %>%
as.data.frame()
knitr::opts_chunk$set(warning = FALSE,
fig.height = 6,
fig.width = 6,
fig.align = "center")
train_before_factor = read.csv("Competition_Train.csv")
missing_values <- any(is.na(train_before_factor))
# Print the result
print(missing_values)
train = read.csv("Competition_Train.csv")
test = read.csv("Competition_Test.csv")
#str(train)
#str(test)
train$potential_issue = as.factor(train$potential_issue)
train[18:23] = lapply(train[18:23], as.factor)
#str(train)
test$potential_issue = as.factor(test$potential_issue)
test[18:22] = lapply(test[18:22], as.factor)
#str(test)
library(plyr)
train$potential_issue = revalue(train$potential_issue, c("0"="No", "1"="Yes"))
train[18:23] = lapply(train[18:23], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(train)
test$potential_issue = revalue(test$potential_issue, c("0"="No", "1"="Yes"))
test[18:22] = lapply(test[18:22], function(x) revalue(x, c("0"="No", "1"="Yes")))
#str(test)
library(caret)
library(e1071)
risk_flag_sum = rowSums(train_before_factor[, c("deck_risk", "oe_constraint", "ppap_risk", "stop_auto_buy")])
temp_data3 = train
temp_data3$risk_flag = risk_flag_sum
temp_data3 = subset(temp_data3, select = -c(deck_risk,oe_constraint,ppap_risk,stop_auto_buy,rev_stop))
temp_data4 = temp_data3
temp_data4$inventory_turnover_ratio1 <- ifelse((train$national_inv + train$in_transit_qty) == 0, 0, train$sales_1_month / ((train$national_inv + train$in_transit_qty) / 2))
temp_data6 = temp_data4
diff_forcast = train$forecast_6_month - train$forecast_3_month - train$forecast_3_month
temp_data6$future_growth = diff_forcast/(train$forecast_3_month+1)
missing_values <- any(is.na(temp_data6$future_growth))
# Print the result
print(missing_values)
# Load required libraries
library("dplyr")
library("faux")
library("DataExplorer")
library("caret")
library("randomForest")
# Load your dataset
data <- temp_data6
# Create a control function for RFE
control <- rfeControl(functions = rfFuncs, method = "repeatedcv", repeats = 5, number = 10)
x <- data %>%
select(-went_on_backorder) %>%
as.data.frame()
# Target variable
y <- data$went_on_backorder
# Training: 80%; Test: 20%
set.seed(2021)
inTrain <- createDataPartition(y, p = .80, list = FALSE)[,1]
x_train <- x[ inTrain, ]
x_test  <- x[-inTrain, ]
y_train <- y[ inTrain]
y_test  <- y[-inTrain]
result_rfe1 <- rfe(x = x_train,
y = y_train,
sizes = c(1:20),
rfeControl = control)
